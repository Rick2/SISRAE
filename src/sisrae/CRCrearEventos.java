/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sisrae;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

/**
 *
 * @author Chess
 */
public class CRCrearEventos extends javax.swing.JFrame {

    /**
     * Creates new form CRCrearEventos
     */
    JFrame jf;
    int id_evento = 1;
    boolean ban = false;
    String cadena = "";
    String titulo = "ARCHIVO_REPORTE_DE_EVENTOS";
    String ubicacion = "C:\\Users\\Chess\\Desktop\\GESTION\\PROYECT\\Reportes\\1.-NUEVO_EVENTO";

    public CRCrearEventos(JFrame jf) {
        initComponents();
        this.jf = jf;
        Image imagen = new ImageIcon("img/IconoAdec.jpg").getImage();
        setIconImage(imagen);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ComboBoxObligatorio = new javax.swing.JComboBox();
        TextFieldEstatus = new javax.swing.JTextField();
        TextFieldComienzaHora = new javax.swing.JTextField();
        ComboBoxEvento = new javax.swing.JComboBox();
        TextFieldFechaInicio = new javax.swing.JTextField();
        TextFieldDescripcion = new javax.swing.JTextField();
        TextFieldDuracion = new javax.swing.JTextField();
        TextFieldTerminaHora = new javax.swing.JTextField();
        TextFieldTermino = new javax.swing.JTextField();
        LabelEvento = new javax.swing.JLabel();
        LabelEstatus = new javax.swing.JLabel();
        LabelComienzaHora = new javax.swing.JLabel();
        LabelFechaInicio = new javax.swing.JLabel();
        LabelObligatorio = new javax.swing.JLabel();
        LabelDescripcion = new javax.swing.JLabel();
        LabelDuracion = new javax.swing.JLabel();
        LabelTerminaHora = new javax.swing.JLabel();
        LabelFechaTermino = new javax.swing.JLabel();
        BotonGuardar = new javax.swing.JButton();
        BotonImprimir = new javax.swing.JButton();

        setTitle("CREAR EVENTO");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ComboBoxObligatorio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "false", "true" }));

        TextFieldComienzaHora.setPreferredSize(new java.awt.Dimension(90, 20));

        ComboBoxEvento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboBoxEventoMouseClicked(evt);
            }
        });

        LabelEvento.setText("TipoEvento:");

        LabelEstatus.setText("Estatus:");

        LabelComienzaHora.setText("Comienza_Hora:");

        LabelFechaInicio.setText("Fecha_Inicio:");

        LabelObligatorio.setText("Obligatorio:");

        LabelDescripcion.setText("Descripcion:");

        LabelDuracion.setText("Duracion:");

        LabelTerminaHora.setText("Termina_Hora:");

        LabelFechaTermino.setText("Fecha_Termino:");

        BotonGuardar.setText("Guardar");
        BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarActionPerformed(evt);
            }
        });

        BotonImprimir.setText("Imprimir");
        BotonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(LabelFechaTermino))
                    .addComponent(LabelDuracion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelDescripcion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelObligatorio, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelFechaInicio, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelTerminaHora, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelEstatus, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelEvento, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelComienzaHora, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldDescripcion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TextFieldFechaInicio, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TextFieldComienzaHora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addComponent(TextFieldEstatus)
                    .addComponent(ComboBoxObligatorio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldDuracion)
                    .addComponent(TextFieldTerminaHora)
                    .addComponent(ComboBoxEvento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BotonGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(BotonImprimir))
                    .addComponent(TextFieldTermino))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ComboBoxEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelEvento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldEstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelEstatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldComienzaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelComienzaHora))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelFechaInicio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxObligatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelObligatorio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelDescripcion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelDuracion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldTerminaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTerminaHora))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TextFieldTermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelFechaTermino))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonGuardar)
                    .addComponent(BotonImprimir))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BotonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonImprimirActionPerformed
        try {
            if (ComboBoxEvento.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "SELECCIONA TIPO DE EVENTO", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldEstatus.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA ESTATUS", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldComienzaHora.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA COMIENZA_HORA", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldFechaInicio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA FECHA_INICIO", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldDescripcion.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA DESCRIPCION", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldDuracion.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA DURACION", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldTerminaHora.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA TERMINA_HORA", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldTermino.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA FECHA_TERMINO", "error", JOptionPane.ERROR_MESSAGE);
            } else if (ComboBoxEvento.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "SELECCIONA TIPO DE EVENTO", "error", JOptionPane.ERROR_MESSAGE);
            } else {
                CRConsultasRegistroDeEventos x = new CRConsultasRegistroDeEventos();
                int id_evento = x.GetContador();
                int id_tipo = ComboBoxEvento.getSelectedIndex();
                String estatus = TextFieldEstatus.getText();
                String comienzahora = TextFieldComienzaHora.getText();
                String fechainicio = TextFieldFechaInicio.getText();
                int condicional = ComboBoxObligatorio.getSelectedIndex();
                String descripcion = TextFieldDescripcion.getText();
                String duracion = TextFieldDuracion.getText();
                String terminahora = TextFieldTerminaHora.getText();
                String termino = TextFieldTermino.getText();
                String tipoevento = ComboBoxEvento.getSelectedItem().toString();
                x.InsertarEvento(estatus, comienzahora, fechainicio, descripcion, duracion, terminahora, termino, tipoevento, id_evento, condicional, id_tipo);
                System.out.println("\n\"REGISTRO CREADO CON EXITO\"\tID = " + id_evento);
                ban = true;
            }
        } catch (SQLException ex) {
            Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
        }
//CREACION DE REPORTE
        if (ban == true) {
            try {
                CRConsultasRegistroDeEventos consulta = new CRConsultasRegistroDeEventos();
                ArrayList<String> arr = consulta.GetDatosReporte(id_evento);
                for (int i = 0; i < arr.size(); i++) {
                    cadena += arr.get(i);
                    //                System.out.println("TIENES " + arr.get(i));
                }
                XWPFDocument lol = new XWPFDocument();

                XWPFParagraph paragraph = lol.createParagraph();
                XWPFRun run = paragraph.createRun();

                run.setText(titulo);

                run.setFontSize(24);
                run.setFontFamily("Century Gothic");
                // es para dibujar y tipo de linea en debajo de titulo
                run.setUnderline(UnderlinePatterns.THICK);
                run.setBold(true);
                run.setItalic(true);
                //se trabaja con el color hexadecimal
                run.setColor("4169E1");

                paragraph.setAlignment(ParagraphAlignment.CENTER);

                // declaramos otra para el parrafo
                XWPFParagraph paragraph2 = lol.createParagraph();
                XWPFRun runs = paragraph2.createRun();
                runs.addBreak();
                runs.setFontSize(12);
                runs.setFontFamily("Century Gothic");
                runs.setText(cadena);

                // alinear de parrafo
                paragraph2.setAlignment(ParagraphAlignment.LEFT);
//                paragraph2.

                try {
                    FileOutputStream output = new FileOutputStream(ubicacion + ".docx");
                    lol.write(output);
                    output.close();
                    JOptionPane.showMessageDialog(null, "EXITO AL CREAR REPORTE");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                jf.show();
                this.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_BotonImprimirActionPerformed

    private void BotonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActionPerformed
        try {
            if (ComboBoxEvento.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "SELECCIONA TIPO DE EVENTO", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldEstatus.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA ESTATUS", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldComienzaHora.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA COMIENZA_HORA", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldFechaInicio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA FECHA_INICIO", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldDescripcion.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA DESCRIPCION", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldDuracion.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA DURACION", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldTerminaHora.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA TERMINA_HORA", "error", JOptionPane.ERROR_MESSAGE);
            } else if (TextFieldTermino.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INGRESA FECHA_TERMINO", "error", JOptionPane.ERROR_MESSAGE);
            } else if (ComboBoxEvento.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "SELECCIONA TIPO DE EVENTO", "error", JOptionPane.ERROR_MESSAGE);
            } else {
                CRConsultasRegistroDeEventos x = new CRConsultasRegistroDeEventos();
                int id_evento = x.GetContador();
                System.out.println("ID EVENTO GET CONTADOR  " + x.GetContador());
                int id_tipo = ComboBoxEvento.getSelectedIndex();
                String estatus = TextFieldEstatus.getText();
                String comienzahora = TextFieldComienzaHora.getText();
                String fechainicio = TextFieldFechaInicio.getText();
                int condicional = ComboBoxObligatorio.getSelectedIndex();
                String descripcion = TextFieldDescripcion.getText();
                String duracion = TextFieldDuracion.getText();
                String terminahora = TextFieldTerminaHora.getText();
                String termino = TextFieldTermino.getText();
                String tipoevento = ComboBoxEvento.getSelectedItem().toString();
                x.InsertarEvento(estatus, comienzahora, fechainicio, descripcion, duracion, terminahora, termino, tipoevento, id_evento, condicional, id_tipo);
                System.out.println("\n\"REGISTRO CREADO CON EXITO\"\tID = " + id_evento);
                jf.show();
                this.setVisible(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonGuardarActionPerformed

    private void ComboBoxEventoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboBoxEventoMouseClicked
        try {
            CRConsultasRegistroDeEventos consulta = new CRConsultasRegistroDeEventos();
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            ArrayList<String> arr = consulta.GetTipoEvento();
            for (String arr1 : arr) {
                modelo.addElement(arr1);
            }
            ComboBoxEvento.setModel(modelo);
        } catch (SQLException | InstantiationException ex) {
            Logger.getLogger(CRCrearEventos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ComboBoxEventoMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.jf.setVisible(true);
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton BotonImprimir;
    private javax.swing.JComboBox ComboBoxEvento;
    private javax.swing.JComboBox ComboBoxObligatorio;
    private javax.swing.JLabel LabelComienzaHora;
    private javax.swing.JLabel LabelDescripcion;
    private javax.swing.JLabel LabelDuracion;
    private javax.swing.JLabel LabelEstatus;
    private javax.swing.JLabel LabelEvento;
    private javax.swing.JLabel LabelFechaInicio;
    private javax.swing.JLabel LabelFechaTermino;
    private javax.swing.JLabel LabelObligatorio;
    private javax.swing.JLabel LabelTerminaHora;
    private javax.swing.JTextField TextFieldComienzaHora;
    private javax.swing.JTextField TextFieldDescripcion;
    private javax.swing.JTextField TextFieldDuracion;
    private javax.swing.JTextField TextFieldEstatus;
    private javax.swing.JTextField TextFieldFechaInicio;
    private javax.swing.JTextField TextFieldTerminaHora;
    private javax.swing.JTextField TextFieldTermino;
    // End of variables declaration//GEN-END:variables
}
